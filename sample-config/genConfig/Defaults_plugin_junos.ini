# Generic network device sub-tree defaults
# Use with genDevConfig and Shinken SnmpBooster module
#
# This file is indetented using 4 space.
#
###############################################################################
#
# Setup the default variables that apply to all services that are defined
# within this part of the configuration file hierarchy.
#
# All variables can be overriden by a template loaded later in the process.
#
# Datasources define the type of data, the period, scaling and limits
#
###############################################################################
#
#    Copyright (C) 2003 Cougar < cougar @ random . ee >
#                  2012 fmikus < fmikus @ acktomic . com >
#
###############################################################################




[DATASOURCE]

### OIDS For juniper MPLS Statistics

    OidmplsLspOctets                       = .1.3.6.1.4.1.2636.3.2.3.1.3
    OidmplsLspPackets                      = .1.3.6.1.4.1.2636.3.2.3.1.4
    
    ### OIDS Juniper
    
    OidJnxInErrors                       = .1.3.6.1.4.1.2636.3.3.1.1.9
    OidJnxInFrameErrors                  = .1.3.6.1.4.1.2636.3.3.1.1.10
    OidJnxInQDrops                       = .1.3.6.1.4.1.2636.3.3.1.1.11
    OidJnxInRunts                        = .1.3.6.1.4.1.2636.3.3.1.1.12
    OidJnxInGiants                       = .1.3.6.1.4.1.2636.3.3.1.1.13
    OidJnxInDiscards                     = .1.3.6.1.4.1.2636.3.3.1.1.14
    OidJnxInHslCrcErrors                 = .1.3.6.1.4.1.2636.3.3.1.1.15
    OidJnxInHslFifoOverFlows             = .1.3.6.1.4.1.2636.3.3.1.1.16
    OidJnxInL3Incompletes                = .1.3.6.1.4.1.2636.3.3.1.1.17
    OidJnxInL2ChanErrors                 = .1.3.6.1.4.1.2636.3.3.1.1.18
    OidJnxInL2MismatchTimeouts           = .1.3.6.1.4.1.2636.3.3.1.1.19
    OidJnxInInvalidVCs                   = .1.3.6.1.4.1.2636.3.3.1.1.20
    OidJnxInFifoErrors                   = .1.3.6.1.4.1.2636.3.3.1.1.21
    OidJnxBucketDrops                    = .1.3.6.1.4.1.2636.3.3.1.1.22
    OidJnxSramErrors                     = .1.3.6.1.4.1.2636.3.3.1.1.23
    OidJnxOutErrors                      = .1.3.6.1.4.1.2636.3.3.1.1.24
    OidJnxCollisions                     = .1.3.6.1.4.1.2636.3.3.1.1.25
    OidJnxCarrierTrans                   = .1.3.6.1.4.1.2636.3.3.1.1.26
    OidJnxOutQDrops                      = .1.3.6.1.4.1.2636.3.3.1.1.27
    OidJnxOutAgedErrors                  = .1.3.6.1.4.1.2636.3.3.1.1.28
    OidJnxOutFifoErrors                  = .1.3.6.1.4.1.2636.3.3.1.1.29
    OidJnxOutHslFifoUnderFlows           = .1.3.6.1.4.1.2636.3.3.1.1.30
    OidJnxOutHslCrcErrors                = .1.3.6.1.4.1.2636.3.3.1.1.31
    
    OidjnxFWCounterPacketCount             = .1.3.6.1.4.1.2636.3.5.2.1.4
    OidjnxFWCounterByteCount               = .1.3.6.1.4.1.2636.3.5.2.1.5
    
    OidjnxAtmIfTxCellCount                 = .1.3.6.1.4.1.2636.3.10.1.1.5
    OidjnxAtmIfRxCellCount                 = .1.3.6.1.4.1.2636.3.10.1.1.6
    OidjnxAtmIfTxIdleCellCount             = .1.3.6.1.4.1.2636.3.10.1.1.7
    OidjnxAtmIfUncorrHCSErrs               = .1.3.6.1.4.1.2636.3.10.1.1.8
    OidjnxAtmIfCorrHCSErrs                 = .1.3.6.1.4.1.2636.3.10.1.1.9
    OidjnxAtmIfTxCellFIFOOverRuns          = .1.3.6.1.4.1.2636.3.10.1.1.10
    OidjnxAtmIfRxCellFIFOOverRuns          = .1.3.6.1.4.1.2636.3.10.1.1.11
    OidjnxAtmIfRxCellFIFOUnderRuns         = .1.3.6.1.4.1.2636.3.10.1.1.12
    OidjnxAtmIfInInvalidVCCells            = .1.3.6.1.4.1.2636.3.10.1.1.13
    OidjnxAtmIfInNoBufferOAMCells          = .1.3.6.1.4.1.2636.3.10.1.1.14
    OidjnxAtmIfInNoBufDropPkts             = .1.3.6.1.4.1.2636.3.10.1.1.15
    OidjnxAtmIfOutVCQueueDrops             = .1.3.6.1.4.1.2636.3.10.1.1.16
    OidjnxAtmIfInBadCrcs                   = .1.3.6.1.4.1.2636.3.10.1.1.17
    OidjnxAtmIfInLenErrPkts                = .1.3.6.1.4.1.2636.3.10.1.1.18
    OidjnxAtmIfInTimeoutPkts               = .1.3.6.1.4.1.2636.3.10.1.1.19
    
    OidjnxOperatingTemp                    = .1.3.6.1.4.1.2636.3.1.13.1.7
    OidjnxOperatingCPU                     = .1.3.6.1.4.1.2636.3.1.13.1.8
    OidjnxOperatingISR                     = .1.3.6.1.4.1.2636.3.1.13.1.9
    OidjnxOperatingBuffer                  = .1.3.6.1.4.1.2636.3.1.13.1.11
    OidjnxOperatingHeap                    = .1.3.6.1.4.1.2636.3.1.13.1.12

     ### Datasources
     
    [[mplsLspOctets]]
        ds_oid       =       $OidmplsLspOctets.%(instance)s
    [[mplsLspPackets]]
        ds_oid       =       $OidmplsLspPackets.%(instance)s
    
    
    
    [[jnxFWCounterPacketCount]]
        ds_oid		=   $OidjnxFWCounterPacketCount.%(instance)s
        # instance is formed of: %filtername%.%countername%.%fwtype%
    
    [[jnxFWCounterByteCount]]
        ds_oid		=   $OidjnxFWCounterByteCount.%(instance)s
        # instance is formed of: %filtername%.%countername%.%fwtype%
    
    [[jnxAtmIfTxCellCount]]
        ds_oid		=   $OidjnxAtmIfTxCellCount.%(instance)s
    
    [[jnxAtmIfRxCellCount]]
        ds_oid		=   $OidjnxAtmIfRxCellCount.%(instance)s
    
    [[jnxAtmIfTxIdleCellCount]]
        ds_oid		=   $OidjnxAtmIfTxIdleCellCount.%(instance)s
    
    [[jnxAtmIfUncorrHCSErrs]]
        ds_oid		=   $OidjnxAtmIfUncorrHCSErrs.%(instance)s
    
    [[jnxAtmIfCorrHCSErrs]]
        ds_oid		=   $OidjnxAtmIfCorrHCSErrs.%(instance)s
    
    [[jnxAtmIfTxCellFIFOOverRuns]]
        ds_oid		=   $OidjnxAtmIfTxCellFIFOOverRuns.%(instance)s
    
    [[jnxAtmIfRxCellFIFOOverRuns]]
        ds_oid		=   $OidjnxAtmIfRxCellFIFOOverRuns.%(instance)s
    
    [[jnxAtmIfRxCellFIFOUnderRuns]]
        ds_oid		=   $OidjnxAtmIfRxCellFIFOUnderRuns.%(instance)s
    
    [[jnxAtmIfInInvalidVCCells]]
        ds_oid		=   $OidjnxAtmIfInInvalidVCCells.%(instance)s
    
    [[jnxAtmIfInNoBufferOAMCells]]
        ds_oid		=   $OidjnxAtmIfInNoBufferOAMCells.%(instance)s
    
    [[jnxAtmIfInNoBufDropPkts]]
        ds_oid		=   $OidjnxAtmIfInNoBufDropPkts.%(instance)s
    
    [[jnxAtmIfOutVCQueueDrops]]
        ds_oid		=   $OidjnxAtmIfOutVCQueueDrops.%(instance)s
    
    [[jnxAtmIfInBadCrcs]]
        ds_oid		=   $OidjnxAtmIfInBadCrcs.%(instance)s
    
    [[jnxAtmIfInLenErrPkts]]
        ds_oid		=   $OidjnxAtmIfInLenErrPkts.%(instance)s
    
    [[jnxAtmIfInTimeoutPkts]]
        ds_oid		=   $OidjnxAtmIfInTimeoutPkts.%(instance)s
    
    
    [[jnxOperatingTemp]]
        ds_oid		=   $OidjnxOperatingTemp.%(instance)s
        ds_type		=   GAUGE
    
    [[jnxOperatingCPU]]
        ds_oid		=   $OidjnxOperatingCPU.%(instance)s
        ds_type		=   GAUGE
    
    [[jnxOperatingISR]]
        ds_oid		=    $OidjnxOperatingISR.%(instance)s
        ds_type		=   GAUGE
    
    [[jnxOperatingBuffer]]
        ds_oid		=   $OidjnxOperatingBuffer.%(instance)s
        ds_type		=   GAUGE
    
    [[jnxOperatingHeap]]
        ds_oid		=   $OidjnxOperatingHeap.%(instance)s
        ds_type		=   GAUGE

###############################################################################
#
# DSTEMPLATE are definitions that will tell the collection engine what to retrieve
# from the device, and how they should be displayed. Each service that is defined
# in a Shinken configuration file should be associated with a DSTEMPLATE.
#
# DSTEMPLATE is optional in the target definition as you may not want to pull
# data for it. Examples are Chassis's of devices for which the OIDs
# haven't been detailed yet(temperature, cpu, memory). 
#
###############################################################################

[DSTEMPLATE]
    [[juniper-mpls-tunnel]]
        ds          =       "mplsLspOctets, mplsLspPackets"
        graph        =       "All: mplsLspOctets mplsLspPackets"
    
    [[juniper-firewall-counter]]
        ds	=	"jnxFWCounterPacketCount, jnxFWCounterByteCount"
        graph        = 	"""Octets: jnxFWCounterByteCount,
        Packets: jnxFWCounterPacketCount"""
    
    [[juniper-firewall-policer]]
        ds	=	"jnxFWCounterPacketCount"
        graph	=	"Packets: jnxFWCounterPacketCount"
    
    
    [[juniper-standard-interface-hc]]
        ds          = 	"""ifHCInOctets, ifHCOutOctets, ifInErrors,
        ifOutErrors, ifHCInUcastPkts, ifHCOutUcastPkts"""
        graph        = 	"""Octets: ifHCInOctets ifHCOutOctets,
        UcastPackets: ifHCInUcastPkts ifHCOutUcastPkts,
        Errors: ifInErrors ifOutErrors"""
    
    [[juniper-interface-hc]]
        ds          = 	"""ifHCInOctets, ifHCOutOctets, ifInErrors,
        ifOutErrors, ifInUcastPackets, ifOutUcastPackets,
        ifHCInMulticastPkts, ifHCOutMulticastPkts,
        ifHCInBroadcastPkts, ifHCOutBroadcastPkts"""
        graph        = 	"""Octets: ifHCInOctets ifHCOutOctets,
        UcastPackets: ifInUcastPackets ifOutUcastPackets,
        Multicast: ifHCInMulticastPkts ifHCOutMulticastPkts,
        Broadcast: ifHCInBroadcastPkts ifHCOutBroadcastPkts,
        Errors: ifInErrors ifOutErrors"""
    
    [[juniper-sub-interface-hc]]
        ds          = 	"""ifHCInOctets, ifHCOutOctets,
        ifInErrors, ifOutErrors,
        ifHCInUcastPkts, ifHCOutUcastPkts"""
        graph        = 	"""Octets: ifHCInOctets ifHCOutOctets,
        Packets: ifHCInUcastPkts ifHCOutUcastPkts,
        Errors: ifInErrors ifOutErrors"""
    
    [[juniper-atm-interface-hc]]
        ds          = 	"""ifHCInOctets, ifHCOutOctets, ifInErrors,
        ifOutErrors, ifInUcastPackets, ifOutUcastPackets,
        ifHCInMulticastPkts, ifHCOutMulticastPkts,
        ifHCInBroadcastPkts, ifHCOutBroadcastPkts,
        jnxAtmIfTxCellCount, jnxAtmIfRxCellCount, jnxAtmIfTxIdleCellCount,
        jnxAtmIfUncorrHCSErrs, jnxAtmIfCorrHCSErrs,
        jnxAtmIfTxCellFIFOOverRuns, jnxAtmIfRxCellFIFOOverRuns, jnxAtmIfRxCellFIFOUnderRuns,
        jnxAtmIfInInvalidVCCells, jnxAtmIfInNoBufferOAMCells,
        jnxAtmIfInNoBufDropPkts, jnxAtmIfOutVCQueueDrops,
        jnxAtmIfInBadCrcs, jnxAtmIfInLenErrPkts, jnxAtmIfInTimeoutPkts"""
        graph        = 	"""Octets: ifHCInOctets ifHCOutOctets,
        UcastPackets: ifInUcastPackets ifOutUcastPackets,
        Multicast: ifHCInMulticastPkts ifHCOutMulticastPkts,
        Broadcast: ifHCInBroadcastPkts ifHCOutBroadcastPkts,
        Errors: ifInErrors ifOutErrors,
        ATMCells: jnxAtmIfTxCellCount jnxAtmIfRxCellCount jnxAtmIfTxIdleCellCount,
        ATMHCSErrs: jnxAtmIfUncorrHCSErrs jnxAtmIfCorrHCSErrs,
        ATMFIFO: jnxAtmIfTxCellFIFOOverRuns jnxAtmIfRxCellFIFOOverRuns jnxAtmIfRxCellFIFOUnderRuns,
        ATMOutDrops: jnxAtmIfOutVCQueueDrops
        ATMInErr: jnxAtmIfInNoBufferOAMCells jnxAtmIfInNoBufDropPkts jnxAtmIfInInvalidVCCells jnxAtmIfInBadCrcs jnxAtmIfInLenErrPkts jnxAtmIfInTimeoutPkts"""
    
    [[juniper-generic]]
        ds    = SysDescr    
        # Empty target used to store user provided information and assign SNMP dependencies to.
    
    [[juniper-chassis-backplane]]
        ds		=	"jnxOperatingTemp"
        graph		=	"Temp: jnxOperatingTemp"
    
    [[juniper-chassis-powersupply]]
        ds		=	"jnxOperatingTemp"
        graph		=	"Temp: jnxOperatingTemp"
    
    [[juniper-chassis-ssb]]
        ds		=	"jnxOperatingTemp"
        graph		=	"Temp: jnxOperatingTemp"
    
    [[juniper-chassis-fpc]]
        ds		=	"jnxOperatingTemp, jnxOperatingCPU, jnxOperatingISR, jnxOperatingBuffer, jnxOperatingHeap"
        graph        = 	"""Temp: jnxOperatingTemp,
        CPU: jnxOperatingCPU jnxOperatingISR,
        Mem: jnxOperatingBuffer jnxOperatingHeap"""
    
    [[juniper-chassis-pic]]
        ds		=	"jnxOperatingTemp"
        graph		=	"Temp: jnxOperatingTemp"
    
    [[juniper-chassis-re]]
        ds		=	"jnxOperatingTemp, jnxOperatingCPU, jnxOperatingISR, jnxOperatingBuffer"
        graph        = 	"""Temp: jnxOperatingTemp,
        CPU: jnxOperatingCPU jnxOperatingISR,
        Mem: jnxOperatingBuffer"""

###############################################################################
#
## TRIGGER definitions
#
# The trigger dictionnary defines expressions to be applied on retrieved values.
# They are referenced using the trigger variable in the Shinken configuration.
# Note the use of underscore for the Shinken configuration
# and - for the trigger-name in the Defaults file.
#
# Triggers that do not resolve correctly or contain errors will return
# unknown status and log an error message in the plugin output.
#
# For examples see: genConfig.triggers
#
###############################################################################

#[TRIGGER]
    #[[trigger_name1]]
    #    warning =  datasource.function(), <constant>, <operator>
    #    critical = datasource.function(), datasource.function(), <operator>
    #    critical = datasource.function(), <constant>, <operator>, <constant>, <operator>
    
    #[TRIGGERGROUP]
    #   trigger_group_name1 = trigger_name1, trigger_name2


###############################################################################
#
# MAP definitions dynamically find the SNMP instance
#
# REGULAR EXPRESSION MATCHES ARE NOT SUPPORTED AT THIS TIME
# They are documented in case they are implemented later on.
# The instance must fully match as passed in the check arguments
#
###############################################################################

# none defined

###############################################################################
#
# """graph" statements define how the data should be displayed in the graphic.
# Most of the variables defined are directly mapped to the rrdtool graph tool
# that is used to generate the graphics.
#
#
###############################################################################


[GRAPH]
[[jnxFWCounterPacketCount]]
    draw-as	=	AREA
    y-axis	=	"pps"
    units	=	"pps"
    legend	=	"Number of packets being counted"

[[jnxFWCounterByteCount]]
    draw-as	=	AREA
    y-axis	=	"bps"
    units	=	"bps"
    legend	=	"Number of bits (bytes * 8) being counted"
    scale	=	8,*
    bytes	=	0


[[jnxAtmIfTxCellCount]]
    draw-as	=	LINE2
    y-axis	=	"cell/sec"
    units	=	"cell/sec"
    legend	=	"Number of ATM cells transmitted by the interface"

[[jnxAtmIfRxCellCount]]
    draw-as	=	LINE2
    y-axis	=	"cell/sec"
    units	=	"cell/sec"
    legend	=	"Number of ATM cells received by the interface"

[[jnxAtmIfTxIdleCellCount]]
    draw-as	=	LINE2
    y-axis	=	"cell/sec"
    units	=	"cell/sec"
    legend	=	"Number of idle cells sent by the port"

[[jnxAtmIfUncorrHCSErrs]]
    draw-as	=	LINE2
    y-axis	=	"err/sec"
    units	=	"err/sec"
    legend	=	"Number of uncorrectable cell Header Check Sequence (HCS) Errors that occurred"

[[jnxAtmIfCorrHCSErrs]]
    draw-as	=	LINE2
    y-axis	=	"err/sec"
    units	=	"err/sec"
    legend	=	"Number of correctable cell Header Check Sequence (HCS) Errors that occurred"

[[jnxAtmIfTxCellFIFOOverRuns]]
    draw-as	=	LINE2
    y-axis	=	"overrun/sec"
    units	=	"overrun/sec"
    legend	=	"Number of overruns in the Transmit FIFO"

[[jnxAtmIfRxCellFIFOOverRuns]]
    draw-as	=	LINE2
    y-axis	=	"overrun/sec"
    units	=	"overrun/sec"
    legend	=	"Number of overruns in the Receive FIFO"

[[jnxAtmIfRxCellFIFOUnderRuns]]
    draw-as	=	LINE2
    y-axis	=	"underruns/sec"
    units	=	"underruns/sec"
    legend	=	"Number of underruns in the receive FIFO"

[[jnxAtmIfInInvalidVCCells]]
    draw-as	=	LINE2
    y-axis	=	"cell/sec"
    units	=	"cell/sec"
    legend	=	"Number of Cells that arrived for non existent VC"

[[jnxAtmIfInNoBufferOAMCells]]
    draw-as	=	LINE2
    y-axis	=	"cell/sec"
    units	=	"cell/sec"
    legend	=	"Number of received OAM cells or raw cells dropped because no buffers were available to handle them"

[[jnxAtmIfInNoBufDropPkts]]
    draw-as	=	LINE2
    y-axis	=	"pps"
    units	=	"pps"
    legend	=	"Number of AAL5 packets dropped because there was no enough buffer to handle them"

[[jnxAtmIfOutVCQueueDrops]]
    draw-as	=	LINE2
    y-axis	=	"pps"
    units	=	"pps"
    legend	=	"Number of packets dropped because of queue limits on each VC"

[[jnxAtmIfInBadCrcs]]
    draw-as	=	LINE2
    y-axis	=	"err/sec"
    units	=	"err/sec"
    legend	=	"Total number of incoming CRC errors"

[[jnxAtmIfInLenErrPkts]]
    draw-as	=	LINE2
    y-axis	=	"pps"
    units	=	"pps"
    legend	=	"Number of AAL5 packets dropped because their length was incorrect"

[[jnxAtmIfInTimeoutPkts]]
    draw-as	=	LINE2
    y-axis	=	"pps"
    units	=	"pps"
    legend	=	"Number of AAL5 packets dropped because of reassembly timeout"

[[jnxOperatingTemp]]
    draw-as	=	AREA
    y-axis	=	"�C"
    units	=	"�C"
    legend	=	"Temperature"

[[jnxOperatingCPU]]
    draw-as	=	LINE2
    y-min	=	0
    y-max	=	100
    y-axis	=	"%"
    units	=	"%"
    legend	=	"CPU utilization"

[[jnxOperatingISR]]
    draw-as	=	LINE2
    y-min	=	0
    y-max	=	100
    y-axis	=	"%"
    units	=	"%"
    legend	=	"CPU utilization spending in ISR"

[[jnxOperatingBuffer]]
    draw-as	=	AREA
    y-min	=	0
    y-max	=	100
    y-axis	=	"%"
    units	=	"%"
    legend	=	"Buffer pool utilization"

[[jnxOperatingHeap]]
    draw-as	=	LINE2
    y-min	=	0
    y-max	=	100
    y-axis	=	"%"
    units	=	"%"
    legend	=	"Heap utilization"
